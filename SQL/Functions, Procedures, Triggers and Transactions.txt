-- 1
CREATE PROCEDURE dbo.usp_GetEmployeesSalaryAbove35000 AS
BEGIN
	SELECT FirstName AS [First Name],
       LastName AS [Last Name]
       FROM Employees
	WHERE Salary > 35000
END

GO
-- 2
CREATE PROCEDURE dbo.usp_GetEmployeesSalaryAboveNumber(@minSalary DECIMAL(18,4)) AS
BEGIN
	SELECT FirstName AS [First Name],
       LastName AS [Last Name]
       FROM Employees
	WHERE Salary >= @minSalary
END

GO
-- 3
CREATE PROCEDURE usp_GetTownsStartingWith
(
                 @startsWith NVARCHAR(MAX)
)
AS
     BEGIN
         SELECT Name AS Town
         FROM Towns
         WHERE Name LIKE(@startsWith+'%');
     END;

GO
-- 4
CREATE PROCEDURE usp_GetEmployeesFromTown
(
	@townName VARCHAR(50)
)
AS
	BEGIN
		SELECT
			FirstName AS [FirstName],
			LastName AS [LastName]
		FROM Employees AS e
		JOIN Addresses AS a ON e.AddressID = a.AddressID
		JOIN Towns AS t ON a.TownID = t.TownID
		WHERE t.Name = @townName
	END
GO

-- 5
CREATE FUNCTION ufn_GetSalaryLevel(@salary DECIMAL(18,4))
RETURNS NVARCHAR(10)
AS 
BEGIN
	IF (@salary < 30000) 
		RETURN 'Low'
	ELSE IF(@Salary <= 50000)
		RETURN 'Average'
	ELSE RETURN 'High'

	RETURN 'High'
END
GO
-- 6
CREATE PROCEDURE usp_EmployeesBySalaryLevel(@level NVARCHAR(10))
AS
BEGIN
	SELECT
		FirstName AS [First Name],
		LastName AS [Last Name]
	FROM Employees
	WHERE dbo.ufn_GetSalaryLevel(Salary) = @level
END
GO
-- 7
CREATE FUNCTION ufn_IsWordComprised
(
                @setOfLetters NVARCHAR(MAX),
                @word         NVARCHAR(MAX)
)
RETURNS BIT
AS
     BEGIN
         DECLARE @currentIndex INT= 1;
         WHILE(@currentIndex <= LEN(@word))
             BEGIN
                 DECLARE @currentLetter CHAR= SUBSTRING(@word, @currentIndex, 1);
                 IF(CHARINDEX(@currentLetter, @setOfLetters) <= 0)
                     BEGIN
                         RETURN 0;
                 END;
                 SET @currentIndex+=1;
             END;
         RETURN 1;
     END;
GO
-- 9
CREATE PROCEDURE usp_GetHoldersFullName
AS
BEGIN
	SELECT FirstName +' '+LastName FROM AccountHolders
END

EXEC dbo.usp_GetHoldersFullName
GO
-- 10
CREATE PROCEDURE usp_GetHoldersWithBalanceHigherThan(@balance MONEY)
AS
BEGIN
	SELECT 
		ah.FirstName AS [First Name],
		ah.LastName AS [Last Name]
	FROM AccountHolders AS ah
		JOIN Accounts AS a ON ah.Id = a.AccountHolderId
	GROUP BY ah.FirstName,
			 ah.LastName
	HAVING @balance < SUM(a.Balance)
	ORDER BY ah.FirstName, ah.LastName
END

EXEC usp_GetHoldersWithBalanceHigherThan 10
GO
-- 11
CREATE FUNCTION ufn_CalculateFutureValue(@sum MONEY, @yearlyInterestRate FLOAT, @numberOfYears INT)
RETURNS MONEY
AS
BEGIN
	RETURN @sum * (POWER(1 + @yearlyInterestRate, @numberOfYears));
END
GO

SELECT dbo.ufn_CalculateFutureValue(1000, 0.1, 5)
GO
-- 12
CREATE PROCEDURE usp_CalculateFutureValueForAccount(@accountId INT, @interestRate FLOAT)
AS
BEGIN
	SELECT TOP(1)
		ah.Id AS [Account Id],
		ah.FirstName AS [First Name],
		ah.LastName AS [Last Name],
		a.Balance AS [Current Balance],
		dbo.ufn_CalculateFutureValue(a.Balance, @interestRate, 5)
	FROM AccountHolders AS ah
	JOIN Accounts AS a ON ah.Id = a.AccountHolderId
	WHERE ah.Id = @accountId
END

EXEC usp_CalculateFutureValueForAccount 1, 0.1
-- 14


