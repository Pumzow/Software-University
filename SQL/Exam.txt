CREATE DATABASE Bitbucket
USE Bitbucket
-- [==============================> 1 <==============================]
CREATE TABLE Users(
    Id INT PRIMARY KEY IDENTITY,
    Username VARCHAR(30) UNIQUE NOT NULL,
    Password VARCHAR(30) NOT NULL,
    Email VARCHAR(50) NOT NULL
)

CREATE TABLE Repositories(
    Id INT PRIMARY KEY IDENTITY,
    Name VARCHAR(50) NOT NULL
)
 
CREATE TABLE RepositoriesContributors(
    RepositoryId INT FOREIGN KEY(RepositoryId) REFERENCES Repositories(Id),
    ContributorId INT FOREIGN KEY(ContributorId) REFERENCES Users(Id)
)
 
CREATE TABLE Issues(
    Id INT PRIMARY KEY IDENTITY,
    Title VARCHAR(255) NOT NULL,
    IssueStatus VARCHAR (6) NOT NULL,
    RepositoryId INT FOREIGN KEY(RepositoryId) REFERENCES Repositories(Id),
    AssigneeId INT FOREIGN KEY(AssigneeId) REFERENCES Users(Id)
)
 
CREATE TABLE Commits(
    Id INT PRIMARY KEY IDENTITY,
    Message VARCHAR(255) NOT NULL,
    IssueId INT FOREIGN KEY(IssueId) REFERENCES Issues(Id),
    RepositoryId INT FOREIGN KEY(RepositoryId) REFERENCES Repositories(Id),
    ContributorId INT FOREIGN KEY(ContributorId) REFERENCES Users(Id)
)
 
CREATE TABLE Files(
    Id INT PRIMARY KEY IDENTITY,
    Name VARCHAR(100) NOT NULL,
    Size DECIMAL(10,2) NOT NULL,
    ParentId INT FOREIGN KEY(ParentId) REFERENCES Files(Id),
    CommitId INT FOREIGN KEY(CommitId) REFERENCES Commits(Id)
)

-- [==============================> 2 <==============================]
INSERT INTO Files([Name], Size, ParentId, CommitId) VALUES
('Trade.idk',			2598.0,		1,	1),
('menu.net',			9238.31,	2,	2),
('Administrate.soshy',	1246.93,	3,	3),
('Controller.php',		7353.15,	4,	4),
('Find.java',			9957.86,	5,	5),
('Controller.json',		14034.87,	3,	6),
('Operate.xix',			7662.92,	7,	7)

INSERT INTO Issues(Title, IssueStatus, RepositoryId, AssigneeId) VALUES
('Critical Problem with HomeController.cs file',	'open',	1,	4),
('Typo fix in Judge.html',							'open',	4,	3),
('Implement documentation for UsersService.cs',		'closed',	8,	2),
('Unreachable code in Index.cs',					'open',	9,	8)


-- [==============================> 3 <==============================]
UPDATE Issues 
SET IssueStatus = 'closed'
WHERE AssigneeId = 6

-- [==============================> 4 <==============================]

DECLARE @RepId INT
SELECT @RepId = Id FROM Repositories
WHERE [Name] = 'Softuni-Teamwork'

DECLARE @FileId INT
Select @FileId = f.Id FROM Files AS f
JOIN Commits AS c ON f.CommitId = c.Id 
WHERE c.RepositoryId = @RepId

DELETE FROM Files
WHERE Id = @FileId
DELETE FROM Commits
WHERE RepositoryId = @RepId
DELETE FROM Issues
WHERE RepositoryId = @RepId
DELETE FROM RepositoriesContributors
WHERE RepositoryId = @RepId
DELETE FROM Repositories
WHERE [Name] = 'Softuni-Teamwork'




SELECT * FROM Repositories


SELECT Id, Message, RepositoryId, ContributorId FROM Commits
ORDER BY Id ASC, [Message] ASC, RepositoryId ASC, ContributorId ASC


SELECT Id, [Name], Size FROM Files
WHERE Size > 1000 AND [Name] LIKE '%html%'
ORDER BY Size DESC, Id ASC, [Name] ASC

SELECT i.Id, u.Username +' : '+i.Title AS IssueAssignee FROM Issues AS i
JOIN Users AS u ON i.AssigneeId = u.Id
ORDER BY i.Id DESC, IssueAssignee ASC

SELECT f.Id, f.Name, CONVERT(VARCHAR, f.Size) + 'KB' AS Size FROM Files AS f
JOIN Files AS f2 ON f.Id = f2.Id
WHERE f.ParentId IS NOT NULL
ORDER BY f.Id ASC, f.Name ASC, f.Size DESC

SELECT f1.Id, f1.Name, CONVERT(VARCHAR, f1.Size) + 'KB'
FROM Files f1
WHERE NOT EXISTS (
  SELECT 1
  FROM Files f2
  WHERE f2.ParentId = f1.Id
)

SELECT TOP(5) r.Id, r.Name, COUNT(c.Id) AS Commits FROM RepositoriesContributors as rc
JOIN Repositories AS r ON r.Id = rc.RepositoryId
JOIN Commits AS c ON c.RepositoryId = rc.RepositoryId
GROUP BY r.ID, r.Name
ORDER BY COUNT(c.Id) DESC, r.Id ASC, r.Name ASC


SELECT u.Username FROM Users AS u
JOIN Commits AS c ON c.ContributorId = u.Id
JOIN Files AS f ON f.CommitId = c.Id

SELECT u.Username, AVG(f.Size) AS Size FROM USERS AS u
JOIN Commits AS c ON c.ContributorId = u.Id
JOIN Files AS f ON c.Id = f.CommitId
GROUP BY u.Username
ORDER BY AVG(f.Size) DESC, u.Username ASC 
GO

CREATE FUNCTION udf_AllUserCommits(@username VARCHAR(30))
RETURNS INT
AS
BEGIN
	DECLARE @Count INT

	SELECT @Count = COUNT(c.Id) FROM Users AS u
	JOIN Commits AS c ON u.Id = c.ContributorId
	WHERE u.Username = @username

	RETURN @Count
END
GO

SELECT dbo.udf_AllUserCommits('UnderSinduxrein') 

GO

CREATE PROCEDURE usp_SearchForFiles(@fileExtension VARCHAR(MAX))
AS
BEGIN
	SELECT Id, Name, CONVERT(VARCHAR(MAX), Size)+'KB' FROM Files
	WHERE Name LIKE ('%'+@fileExtension)
END
GO

EXEC usp_SearchForFiles 'txt' 

DROP DATABASE Bitbucket


