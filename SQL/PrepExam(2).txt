CREATE DATABASE TripService
USE TripService

-- [==============================> 1 <==============================]
CREATE TABLE Cities
(
	Id INT PRIMARY KEY IDENTITY,
	[Name] NVARCHAR(20) NOT NULL,
	CountryCode CHAR(2) NOT NULL
)

CREATE TABLE Hotels
(
	Id INT PRIMARY KEY IDENTITY,
	[Name] NVARCHAR(30) NOT NULL,
	CityId INT FOREIGN KEY REFERENCES Cities(Id) NOT NULL,
	EmployeeCount INT NOT NULL,
	BaseRate DECIMAL(32,2)
)

CREATE TABLE Rooms
(
	Id INT PRIMARY KEY IDENTITY,
	Price DECIMAL(32,2) NOT NULL,
	[Type] NVARCHAR(20) NOT NULL,
	Beds INT NOT NULL,
	HotelId INT FOREIGN KEY REFERENCES Hotels(Id) NOT NULL
)

CREATE TABLE Trips
(
	Id INT PRIMARY KEY IDENTITY,
	RoomId INT FOREIGN KEY REFERENCES Rooms(Id) NOT NULL,
	BookDate DATE NOT NULL,
	ArrivalDate DATE NOT NULL,
	ReturnDate DATE NOT NULL,
	CancelDate DATE,
	CHECK(BookDate < ArrivalDate),
	CHECK(ArrivalDate < ReturnDate),
)

CREATE TABLE Accounts
(
	Id INT PRIMARY KEY IDENTITY,
	FirstName NVARCHAR(50) NOT NULL,
	MiddleName NVARCHAR(20),
	LastName NVARCHAR(50) NOT NULL,
	CityId INT FOREIGN KEY REFERENCES Cities(Id) NOT NULL,
	BirthDate DATE NOT NULL,
	Email VARCHAR(100) UNIQUE NOT NULL
)

CREATE TABLE AccountsTrips
(
	AccountId INT FOREIGN KEY REFERENCES Accounts(Id) NOT NULL,
	TripId INT FOREIGN KEY REFERENCES Trips(Id) NOT NULL,
	Luggage INT CHECK(Luggage >= 0) NOT NULL,
	CONSTRAINT PK_AccountTrips PRIMARY KEY (AccountId, TripId)
)

-- [==============================> 2 <==============================]
INSERT INTO Accounts(FirstName, MiddleName, LastName, CityId, BirthDate, Email) VALUES
('John', 'Smith', 'Smith', 34, '1975-07-21', 'j_smith@gmail.com'),
('Gosho', NULL, 'Petrov', 11, '1978-05-16', 'g_petrov@gmail.com'),
('Ivan', 'Petrovich', 'Pavlov', 59, '1849-09-26', 'i_pavlov@softuni.bg'),
('Friedrich', 'Wilhelm', 'Nietzsche', 2, '1844-10-15', 'f_nietzsche@softuni.bg')

INSERT INTO Trips(RoomId, BookDate, ArrivalDate, ReturnDate, CancelDate) VALUES
(101, '2015-04-12', '2015-04-14', '2015-04-20', '2015-02-02'),
(102, '2015-07-07', '2015-07-15', '2015-07-22', '2015-04-29'),
(103, '2013-07-17', '2013-07-23', '2013-07-24', NULL),
(104, '2012-03-17', '2012-03-31', '2012-04-01', '2012-01-10'),
(109, '2017-08-07', '2017-08-28', '2017-08-29', NULL)

-- [==============================> 3 <==============================]
UPDATE Rooms
SET Price = Price + (Price * 14.0 / 100.0)
WHERE HotelId = 5 OR HotelId = 7 Or HotelId = 9

-- [==============================> 4 <==============================]
DELETE FROM AccountsTrips
WHERE AccountId = 47

-- [==============================> 5 <==============================]
SELECT FirstName, LastName, FORMAT(BirthDate, 'MM-dd-yyyy'), c.Name AS Hometown, Email FROM Accounts AS a
JOIN Cities AS c ON c.Id = a.CityId
WHERE Email LIKE 'e%'
ORDER BY c.Name

-- [==============================> 6 <==============================]
SELECT c.Name, Count(h.Id) FROM Cities AS c
JOIN Hotels AS h ON h.CityId = c.Id
GROUP BY c.Name
ORDER BY Count(h.Id) DESC, c.Name

-- [==============================> 7 <==============================]
SELECT a.Id AS AccountId,
       a.FirstName +' '+LastName AS FullName,
	   MAX(DATEDIFF(DAY, t.ArrivalDate , t.ReturnDate)) AS LongestTrip,
	   MIN(DATEDIFF(DAY, t.ArrivalDate , t.ReturnDate)) AS ShortestTrip FROM Trips AS t
JOIN AccountsTrips AS at ON at.TripId = t.Id
JOIN Accounts AS a ON a.Id = at.AccountId
WHERE a.MiddleName IS NULL AND t.CancelDate IS NULL
GROUP BY a.Id,a.FirstName, a.LastName
ORDER BY LongestTrip DESC, ShortestTrip ASC

-- [==============================> 8 <==============================]
SELECT TOP(10) c.Id AS Id,
	   c.Name AS City,
	   c.CountryCode AS Country,
	   Count(a.Id) AS Accounts
FROM Cities AS c
JOIN Accounts AS a ON a.CityId = c.Id
GROUP BY c.Id, c.Name, c.CountryCode 
ORDER BY COUNT(a.Id) DESC

-- [==============================> 9 <==============================]
SELECT a.Id AS Id, a.Email AS Email, c.Name AS City, COUNT(t.Id) AS Trips FROM Accounts AS a
JOIN Cities AS c ON c.Id = a.CityId
JOIN AccountsTrips AS at ON at.AccountId = a.Id
JOIN Trips AS t ON t.Id = at.TripId
JOIN Rooms AS r ON r.Id = t.RoomId
JOIN Hotels AS h ON h.Id = r.HotelId
WHERE h.CityId = a.CityId
GROUP BY a.Id, a.Email, c.Name
ORDER BY COUNT(t.Id) DESC, a.Id ASC

-- [==============================> 10 <==============================]
SELECT t.Id AS Id,
	   CASE
		   WHEN a.MiddleName IS NULL THEN a.FirstName + ' ' + a.LastName
	       ELSE a.FirstName + ' ' + a.MiddleName + ' ' + a.LastName
	   END AS [Full Name],
	   c.Name AS [From],
	   c2.Name AS [To],
	   CASE
		   WHEN t.CancelDate IS NOT NULL THEN 'Canceled'
		   ELSE CONVERT(NVARCHAR, DATEDIFF(DAY, CONVERT(DATE, t.ArrivalDate), CONVERT(DATE, t.ReturnDate))) + ' days'
	   END AS Duration
FROM Trips AS t

JOIN AccountsTrips AS at ON t.Id = at.TripId
JOIN Accounts AS a ON a.Id = at.AccountId
JOIN Cities AS c ON c.Id = a.CityId

JOIN Rooms AS r ON t.RoomId = r.Id
JOIN Hotels AS h ON h.Id = r.HotelId
JOIN Cities AS c2 ON h.CityId = c2.Id

ORDER BY [Full Name], t.Id
GO

-- [==============================> 11 <==============================]
CREATE FUNCTION udf_GetAvailableRoom(@HotelId INT, @Date DATE, @People INT)
RETURNS VARCHAR(MAX)
AS
BEGIN
 DECLARE @RoomId INT = (SELECT TOP(1) r.Id FROM Trips AS t
						JOIN Rooms AS r ON t.RoomId = r.Id
						JOIN Hotels AS h ON r.HotelId = h.Id
						WHERE h.Id = @HotelId 
						  AND @Date NOT BETWEEN t.ArrivalDate AND t.ReturnDate 
						  AND t.CancelDate IS NULL
						  AND r.Beds >= @People
						  AND YEAR(@Date) = YEAR(t.ArrivalDate)
						  ORDER BY r.Price DESC)

  IF @RoomId IS NULL
	RETURN 'No rooms available'

  DECLARE @RoomPrice DECIMAL(15,2) = (SELECT Price FROM Rooms WHERE Id = @RoomId)
  DECLARE @RoomType VARCHAR (50)  = (SELECT [Type] FROM Rooms WHERE Id = @RoomId)
  DECLARE @BedsCount INT  = (SELECT Beds FROM Rooms WHERE Id = @RoomId)
  DECLARE  @HotelBaseRate DECIMAL(15,2) = (SELECT BaseRate FROM Hotels AS h
												JOIN Rooms AS r ON r.Id = @RoomId
											WHERE h.Id = r.HotelId)
  DECLARE @TotalPrice DECIMAL(15, 2) =  (@HotelBaseRate + @RoomPrice) * @People

RETURN CONCAT('Room ',@RoomId,': ', @RoomType,' (',@BedsCount,' beds',') - $',@TotalPrice)
RETURN 'Room ' + CONVERT(NVARCHAR,@RoomId) 
		+ ': ' + CONVERT(NVARCHAR, @RoomType) 
		+ ' (' + CONVERT(NVARCHAR, @BedsCount) 
		+ ' beds)' 
		+ ' - $' 
		+ CONVERT(NVARCHAR, @TotalPrice)
END
GO

SELECT dbo.udf_GetAvailableRoom(112, '2011-12-17', 2) 
SELECT dbo.udf_GetAvailableRoom(94, '2015-07-26', 3) 
SELECT dbo.udf_GetAvailableRoom(6, '2012-11-01', 2)

-- [==============================> 12 <==============================]
GO

CREATE PROCEDURE usp_SwitchRoom(@TripId INT, @TargetRoomId INT)
AS
BEGIN

	DECLARE @RoomHotelId INT = (SELECT h.Id FROM Trips AS t
								JOIN Rooms AS r ON t.RoomId = r.Id
								JOIN Hotels AS h ON h.Id = r.HotelId
								WHERE t.Id = @TripId)
	DECLARE @NewRoomHotelId INT = (SELECT HotelId FROM Rooms WHERE @TargetRoomId = Id)

	--DECLARE @NeededBeds INT = (SELECT COUNT(*) FROM Trips as t
	--							JOIN AccountsTrips AS ac ON t.Id = ac.TripId 
	--							JOIN Accounts AS a ON a.Id = ac.AccountId)
	--DECLARE @BedsWeHave INT = (SELECT Beds FROM Trips as t
	--							JOIN Rooms AS r ON r.Id = @TargetRoomId)

	DECLARE @BedsCount INT = (SELECT Beds FROM Rooms WHERE @TargetRoomId = Id)

	DECLARE @AccoutTripsCount INT = (SELECT COUNT(*) FROM AccountsTrips WHERE TripId = @TripId)

	IF(@RoomHotelId != @NewRoomHotelId)
		THROW 50001, 'Target room is in another hotel!', 1
	ELSE IF(@AccoutTripsCount > @BedsCount)
		THROW 50001, 'Not enough beds in target room!', 1
	ELSE
		BEGIN
			UPDATE Trips
				SET RoomId = @TargetRoomId
				WHERE Id = @TripId
		END
END

EXEC usp_SwitchRoom 10, 7 
EXEC usp_SwitchRoom 10, 8 